% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MaxSubarray1DNaive.R
\name{max_subarray_sum_naive}
\alias{max_subarray_sum_naive}
\title{Find Maximum Subarray Sum (Brute-Force Approach)}
\usage{
max_subarray_sum_naive(arr)
}
\arguments{
\item{arr}{A numeric vector containing the input array.}
}
\value{
A single numeric value representing the maximum subarray sum found.
}
\description{
Computes the maximum sum of any contiguous subarray using a naive O(n²) approach
by checking all possible subarrays.
}
\details{
This function implements the brute-force solution to the maximum subarray problem
by iterating through all possible starting and ending indices of subarrays,
calculating their sums, and keeping track of the maximum encountered.
}
\section{Warning}{

This function has quadratic time complexity (O(n²)) and should not be used for
large input sizes (n > 1000). For better performance, use \href{https://en.wikipedia.org/wiki/Maximum_subarray_problem}{Kadane's algorithm}.
}

\examples{
# Basic usage
max_subarray_sum_naive(c(-2, 1, -3, 4, -1, 2, 1, -5, 4))  # Returns 6

# Edge case: all negative numbers
max_subarray_sum_naive(c(-3, -1, -2))  # Returns -1

}
\seealso{
\code{\link{max_subarray_sum_opt}} for an optimized O(n) implementation using Kadane's algorithm.
}
